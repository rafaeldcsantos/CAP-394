---
lightbox: true
format: html
---


# Data

This is the material (slides and notes) of the third lecture on the course.


{{< include Resources/Slides/CAP394-2024-3-Data.qmd >}}

## Code for examples used in this lecture

### Parliamentary Amendment 

A *parliamentary amendment* is a proposal made by a member of parliament or a legislator to specify provisions in a bill or legislation that is being considered by the parliament. This term is commonly used in the legislative processes of various countries, including Brazil, often to earmark funds for specific projects.

We can download a list of parliamentary amendments as a CSV file from the Federal Government Transparency Open Data Portal ([_Dados Abertos | Portal da Transparência do Governo Federal_](https://portaldatransparencia.gov.br/download-de-dados)).

The first 15 lines of that file are shown below:

``` {.plaintext}
"Código da Emenda";"Ano da Emenda";"Tipo de Emenda";"Código do Autor da Emenda";"Nome do Autor da Emenda";"Número da emenda";"Localidade do gasto";"Código Função";"Nome Função";"Código Subfunção";"Nome Subfunção";"Valor Empenhado";"Valor Liquidado";"Valor Pago";"Valor Restos A Pagar Inscritos";"Valor Restos A Pagar Cancelados";"Valor Restos A Pagar Pagos"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"POMBAL - PB";"15";"Urbanismo";"451";"infra-estrutura urbana";"150000,00";"0,00";"0,00";"0,00";"146950,00";"3050,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"CAIÇARA - RS";"10";"Saúde";"302";"Assistência hospitalar e ambulatorial";"250000,00";"0,00";"0,00";"0,00";"0,00";"250000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"PIAUÍ (UF)";"10";"Saúde";"572";"Desenvolvimento tecnológico e engenharia";"896692,97";"0,00";"0,00";"0,00";"0,00";"896692,97"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"SANTANA DE PARNAÍBA - SP";"15";"Urbanismo";"451";"infra-estrutura urbana";"500000,00";"0,00";"0,00";"0,00";"493100,00";"6900,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"PALMITINHO - RS";"10";"Saúde";"302";"Assistência hospitalar e ambulatorial";"250000,00";"0,00";"0,00";"0,00";"0,00";"250000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"JANDIRA - SP";"10";"Saúde";"302";"Assistência hospitalar e ambulatorial";"1199996,15";"0,00";"0,00";"0,00";"499996,15";"700000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"FUNILÂNDIA - MG";"20";"Agricultura";"608";"Promoção da produção agropecuária";"398737,97";"0,00";"0,00";"0,00";"10000,00";"388737,97"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"VARGEM GRANDE PAULISTA - SP";"15";"Urbanismo";"451";"infra-estrutura urbana";"250000,00";"0,00";"0,00";"0,00";"0,00";"250000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"RESENDE - RJ";"27";"Desporto e lazer";"812";"Desporto comunitário";"692500,00";"0,00";"0,00";"0,00";"285187,50";"407312,50"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"BURITIRAMA - BA";"27";"Desporto e lazer";"812";"Desporto comunitário";"400000,00";"0,00";"0,00";"0,00";"0,00";"400000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"JARDIM - MS";"10";"Saúde";"302";"Assistência hospitalar e ambulatorial";"3380000,00";"0,00";"0,00";"0,00";"2600000,00";"780000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"LUZ - MG";"10";"Saúde";"302";"Assistência hospitalar e ambulatorial";"250000,00";"0,00";"0,00";"0,00";"0,00";"250000,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"MATOZINHOS - MG";"10";"Saúde";"301";"Atenção básica";"199890,00";"0,00";"0,00";"0,00";"0,00";"199890,00"
"Sem informaç";"2014";"Emenda Individual - Transferências";"S/I";"Sem informação";"S/I";"MOCOCA - SP";"10";"Saúde";"301";"Atenção básica";"498940,80";"0,00";"0,00";"0,00";"0,00";"498940,80"
```

We can notice that the file is a _semicolon_-separated file. Its encoding is ISO-8859. To make things even more complex, the monetary values are in Brazilian format, with comma as the separator between integer and decimal parts. 

To read it into a dataframe in Python [@python2001] and Pandas [@pandasmckinney2012] we first need to import the libraries:


```{python}
#| classes: custompython
import pandas as pd
import plotly.express as px
```

Now we can read the file:

```{python}
#| classes: custompython
file = 'Resources/Data/Emendas/Emendas.csv'
# Read the CSV file using the specified separator and encoding.
df = pd.read_csv(file, sep=';', encoding='ISO-8859-1')
# Convert the Valor field to numeric, taking care of the decimals'
# separator:
df['Valor'] = df['Valor Empenhado'].str.replace('.', '', regex=False).\
                                    str.replace(',', '.').astype(float)
# We don't really need some of the fields (redundant ones):
df = df.drop(['Código da Emenda', 'Nome do Autor da Emenda', 'Número da emenda',
              'Código Função','Código Subfunção'], axis=1)
# We don't really need some of the payment fields (only 'Valor'):
df = df.drop(['Valor Empenhado', 'Valor Liquidado', 'Valor Pago', 
              'Valor Restos A Pagar Inscritos','Valor Restos A Pagar Cancelados',
              'Valor Restos A Pagar Pagos'], axis=1)                                    
# Display part of the data.
df
```

How many unique values we have for `Localidade do Gasto`? 

```{python}
#| classes: custompython
countLoG = df["Localidade do gasto"].value_counts()
# Print the result
print(countLoG)
```

And for `Nome Função`?

```{python}
#| classes: custompython
countNF = df["Nome Função"].value_counts()
# Print the result
print(countNF)
```

And for `Código do Autor da Emenda`?

```{python}
#| classes: custompython
countAdE = df["Código do Autor da Emenda"].value_counts()
# Print the result
print(countAdE)
```

Let's drop some of the rows with values that won't be useful in this analysis, namely, all rows where the amendment proponent is non-identified:

```{python}
#| classes: custompython
dfId = df[df["Código do Autor da Emenda"] != "S/I"]
```

Let's also split the dataframe accordingly to the location of the amendments' application, considering only the countrywide ones and the state ones:

```{python}
#| classes: custompython
dfNacional = dfId[dfId["Localidade do gasto"] == "Nacional"]
dfStates = dfId[dfId["Localidade do gasto"].str.contains(r"\(\w{2}\)", regex=True)]
```

Some of those operations were already examples of slicing or dicing a dataframe -- we selected bits of the data based on the values of its fields. Let's see some basic examples of pivoting. First, let's see how is the spending in national defense year by year.

```{python}
#| classes: custompython
dfDefesaNacional = dfNacional[dfNacional["Nome Função"] == "Defesa nacional"]
dfValueByYear = dfDefesaNacional.groupby("Ano da Emenda")["Valor"].sum().reset_index()
# Create a histogram
fig = px.bar(dfValueByYear, x='Ano da Emenda', y='Valor', 
             title='Total Values per Year in National Defense',
             labels={'Ano da Emenda': 'Year', 'Valor': 'Total Value'})
# Show the plot
fig.show()
```

Which are the possible values for `Nome Subfunção` when `Nome Função` is `Defesa nacional`?


```{python}
#| classes: custompython
subfuncCounts = dfDefesaNacional["Nome Subfunção"].value_counts()
print("\nOccurrences of each unique 'Nome Subfunção':")
print(subfuncCounts)
```

Let's pivot the data and see how each `Nome Subfunção` receives in amendments per year:

```{python}
#| classes: custompython

# Create a pivot table to see spending per year on different "Nome Subfunção"
pivot_table = dfDefesaNacional.pivot_table(
    values='Valor',
    index='Ano da Emenda',
    columns='Nome Subfunção',
    aggfunc='sum',
    fill_value=0
)
pivot_table
```








